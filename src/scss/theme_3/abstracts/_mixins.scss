/**@file abstracts/_mixins.scss */
@use "sass:map";
@use "sass:meta";
@use "sass:string";
/* =========================================
   Mixin: Generate CSS Variables
   ========================================= */

@mixin apply-theme($theme, $include-noncolors: true) {
  $colors: map.get($theme, colors);

  // Generate color variables (always)
  @each $name, $value in $colors {
    --#{"" + $name}: #{$value};
  }

  // Only include font, spacing, and radius if $include-noncolors is true
  @if $include-noncolors == true {
    $font: map.get($theme, font);
    $spacing: map.get($theme, spacing);
    $radius: map.get($theme, radius);
    $shadows: map.get($theme, shadows);
    $z-index: map.get($theme, z-index);
    $containers: map.get($theme, containers);
    $transitions: map.get($theme, transitions);

    // Font sizes
    @each $name, $value in map.get($font, size) {
      --font-size-#{$name}: #{$value};
    }

    // Spacing
    @each $name, $value in $spacing {
      --space-#{$name}: #{$value};
    }

    // Radius
    @each $name, $value in $radius {
      --radius-#{$name}: #{$value};
    }
        // shadows
    @each $name, $value in $shadows {
      --shadow-#{$name}: #{$value};
    }
    // z-index
    @each $name, $value in $z-index {
      --z-index-#{$name}: #{$value};
    }
    // containers
    @each $name, $value in $containers {
      --container-#{$name}: #{$value};
    }
    // transitions
    @each $name, $value in $transitions {
      --transition-#{$name}: #{$value};
    }
  }
}

 /* =========================================
   Mixin: Apply Theme (for :root and data-theme)
   ========================================= */

/// Apply theme variables as CSS custom properties.
/// Supports nested maps and optional comparison to a base theme.
@mixin apply-theme($theme-map, $compare-map: null, $prefix: "") {
  @each $key, $value in $theme-map {
    $safe-key: '' + $key; // ensure key is string-safe
    $var-name: if($prefix != "", "#{$prefix}-#{$safe-key}", $safe-key);

    @if meta.type-of($value) == "map" {
      // Recurse deeper
      $compare-nested: if($compare-map != null and map.has-key($compare-map, $key), map.get($compare-map, $key), null);
      @include apply-theme($value, $compare-nested, $var-name);
    } @else {
      // Get compare value for difference checking
      $base-value: if(
        $compare-map != null and map.has-key($compare-map, $key),
        map.get($compare-map, $key),
        null
      );

      // Only output changed or initial values
      @if $compare-map == null or $base-value != $value {
        --#{$var-name}: #{$value};
      }
    }
  }
}